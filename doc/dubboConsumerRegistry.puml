@startuml

autonumber

AbstractAutowireCapableBeanFactory->AnnotationBean:postProcessBeforeInitialization()
activate AnnotationBean #DarkSalmon
    note right of AnnotationBean #aqua
        找到dubbo的@Service的Bean
        创建对应的ServiceBean serviceConfig，
        设置serviceConfig的register,provider,monitor,application,module,
    end note
    AnnotationBean->AnnotationBean:refer(Reference reference, Class<?> referenceClass)
    AnnotationBean->ReferenceConfig:get()
    activate ReferenceConfig #DarkSalmon
        ReferenceConfig->ReferenceConfig:init()
        ReferenceConfig->ReferenceConfig:createProxy()
        ReferenceConfig->ProtocolAdpative动态代理:refer()
        ProtocolAdpative动态代理->ProtocolFilterWrapper:refer()
        note right of ProtocolFilterWrapper #aqua
            如果protocol是"registry",直接返回this.protocol.export(invoker)，否则返回buildInvokerChain(this.protocol.refer(type, url), "reference.filter", "consumer")
        end note
        ProtocolFilterWrapper->ProtocolListenerWrapper:refer()
        note right of ProtocolListenerWrapper #aqua
            如果protocol是"registry",直接返回this.protocol.refer(invoker)，否则返回new ListenerInvokerWrapper
            其他protocol有injvm
        end note
        ProtocolListenerWrapper->RegistryProtocol:refer(Class<T> type=DemoService, URL url=multicast...)
        activate RegistryProtocol #DarkSalmon
            RegistryProtocol->RegistryFactoryAdpative动态代理:getRegistry()
            activate RegistryFactoryAdpative动态代理 #DarkSalmon
                RegistryFactoryAdpative动态代理->AbstractRegistryFactory:getRegistry(URL url)
                note right of AbstractRegistryFactory #aqua
                    维护了一个ConcurrentHashMap<String, Registry> REGISTRIES
                    拿Reentrant锁起来，看看是不是已经有了，没有就createRegistry然后put
                end note
                AbstractRegistryFactory->MulticastRegistryFactory:createRegistry()

                MulticastRegistryFactory->MulticastRegistry:MulticastRegistry(URL url)
                activate MulticastRegistry #DarkSalmon
                    note right of MulticastRegistry #aqua
                        起一个线程接受注册消息
                        url:multicast://224.5.6.7:1234/com.alibaba.dubbo.registry.RegistryService?
                        application=demo-consumer&
                        dubbo=2.5.3&
                        interface=com.alibaba.dubbo.registry.RegistryService&
                        pid=37728&
                        timestamp=1556504512949
                    end note
                    MulticastRegistry->RegistryProtocol:MulticastRegistry
                deactivate MulticastRegistry
            deactivate RegistryFactoryAdpative动态代理
            RegistryProtocol->MulticastRegistry:register(URL url)
            activate MulticastRegistry #DarkSalmon
                note right of MulticastRegistry #aqua
                    url:dubbo://10.58.69.81:20880/com.imooc.springboot.dubbo.demo.DemoService?
                    anyhost=true&
                    application=demo-provider&
                    dubbo=2.5.3&
                    interface=com.imooc.springboot.dubbo.demo.DemoService&
                    methods=sayHello&
                    pid=20296&
                    side=provider&
                    timestamp=1556098177023
                    再转成subscribeUrl
                    provider://10.58.69.81:20880/com.imooc.springboot.dubbo.demo.DemoService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.5.3&interface=com.imooc.springboot.dubbo.demo.DemoService&methods=sayHello&pid=20296&side=provider&timestamp=1556098177023
                    维护了一个ConcurrentHashMap<URL, NotifyListener> overrideListeners列表，把subscribeUrl放进去
                    返回一个Exporter，里面定义了怎么unexport和获取invoker
                end note
                MulticastRegistry->RegistryProtocol
            deactivate MulticastRegistry
            note right of RegistryProtocol #aqua
                解析queryString，存入map，
                side=customer，
                application=demo-consumer，
                methods=sayHello，
                dubbo， pid， timestamp
                interface=com...DemoService
                看看有没有group参数来决定用mergedCluster还是本身的cluster
                cluster是个动态代理
            end note

            RegistryProtocol->RegistryProtocol:doRefer(Cluster cluster, Registry registry, Class<T> type, URL url)

            note right of RegistryProtocol #aqua
                创建一个RegistryDirectory，把registry， protocol放进去
                把subscribeUrl构造出来，就是consumer protocol的
                如果没注册，就注册一下
                然后设置创建的RegistryDirectory监听subscribeUrl
                最后让cluster join这个directory
            end note
            RegistryProtocol->RegistryDirectory:subscribe(URL url)
            activate RegistryDirectory #DarkSalmon
                RegistryDirectory->MulticastRegistry:subscribe(URL url, NotifyListener listener)
            deactivate RegistryDirectory
            activate MulticastRegistry #DarkSalmon
                note right of MulticastRegistry #aqua
                    这里就是个观察者模式，会翻这个url的监听url list，然后给他们发通知
                end note
                MulticastRegistry->RegistryProtocol
            deactivate MulticastRegistry
            RegistryProtocol->MockClusterWrapper:join(Directory<T> directory)
            MockClusterWrapper->FailoverCluster:join(Directory<T> directory)
            activate FailoverCluster #DarkSalmon
                FailoverCluster->ReferenceConfig:FailoverClusterInvoker
            deactivate FailoverCluster
        deactivate RegistryProtocol

        note right of ReferenceConfig #aqua
            consumer端检查
        end note
        ReferenceConfig->AnnotationBean:FailoverClusterInvoker的Javassist动态代理
    deactivate ReferenceConfig
deactivate AnnotationBean
@enduml